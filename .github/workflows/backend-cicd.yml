name: Backend CI/CD

on:
  push:
    branches: [ "dev-be","release","main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cicd.yml'
  pull_request:
    branches: [ "dev-be","release","main" ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cicd.yml'

env:
  BE_DIR: backend
  GH_TOKEN: ${{ secrets.POMKI_CI_PAT || secrets.GITHUB_TOKEN }}
  IMAGE_TAG: ${{ github.sha }}
  S3_BUCKET_NAME: ${{ secrets.DEPLOY_BUCKET_NAME }}
  CODE_DEPLOY_APP_NAME: ${{ secrets.CODE_DEPLOY_APP_NAME }}
  CODE_DEPLOY_GROUP_NAME: ${{ secrets.CODE_DEPLOY_GROUP_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ env.GH_TOKEN }}
        sparse-checkout: |
          ${{ env.BE_DIR }}
        fetch-depth: 1

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: gradle

    - name: Grant execute permission for gradlew
      working-directory: ${{ env.BE_DIR }}
      run: chmod +x ./gradlew

    - name: Build with Gradle
      working-directory: ${{ env.BE_DIR }}
      run: ./gradlew bootJar

    - name: Create Dockerfile from secret
      run: |
        mkdir -p ${{ env.BE_DIR }}
        cat << 'EOF' > ${{ env.BE_DIR }}/Dockerfile
        ${{ secrets.DOCKERFILE }}
        EOF

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image locally
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.BE_DIR }}
        tags: pomki-backend:${{ env.IMAGE_TAG }}
        outputs: type=docker,dest=/tmp/pomki-backend.tar

    - name: Create deployment files
      run: |
        cat << 'EOF' > docker-compose.yml
        ${{ secrets.DOCKER_COMPOSE }}
        EOF
        
        cat << 'EOF' > appspec.yml
        ${{ vars.APPSPEC_YML }}
        EOF
        
        cat << 'EOF' > .env.dev
        ${{ secrets.ENV_DEV }}
        EOF
        
        cat << 'EOF' > .env.prod
        ${{ secrets.ENV_PROD }}
        EOF
        
        # Create FCM key file from secret (for future use)
        mkdir -p key
        cat << 'EOF' > key/fcm-service.json
        ${{ secrets.FCM_SERVICE_JSON }}
        EOF
        
        mkdir -p scripts
        cat << 'EOF' > scripts/before_install.sh
        #!/bin/bash
        ${{ vars.BEFORE_INSTALL_SH }}
        EOF
        
        cat << 'EOF' > scripts/stop_application.sh
        #!/bin/bash
        ${{ vars.STOP_APPLICATION_SH }}
        EOF
        
        cat << 'EOF' > scripts/deploy.sh
        #!/bin/bash
        ${{ secrets.DEPLOY_SH }}
        EOF
        
        cat << 'EOF' > scripts/validate_service.sh
        #!/bin/bash
        ${{ vars.VALIDATE_SERVICE_SH }}
        EOF
        
        # Convert CRLF to LF and make scripts executable
        find scripts/ -name "*.sh" -type f -exec sed -i 's/\r$//' {} \;
        chmod +x scripts/*.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_DEPLOY_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp appspec.yml deploy/
        cp -r scripts/ deploy/
        cp .env.dev deploy/
        cp .env.prod deploy/
        cp docker-compose.yml deploy/
        cp /tmp/pomki-backend.tar deploy/
        cd deploy && zip -r ../deploy.zip .

    - name: Upload to S3
      run: aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/backend/deploy-${{ env.IMAGE_TAG }}.zip

    - name: Deploy with AWS CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
          --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=backend/deploy-${{ env.IMAGE_TAG }}.zip,bundleType=zip

    - name: Notify Discord on Success
      if: success()
      uses: tsickert/discord-webhook@v7.0.0
      with:
        webhook-url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        embed-title: "✅ Backend Deploy Success!"
        embed-description: |
          **Commit:** `${{ github.event.head_commit.message }}`
          **Branch:** `${{ github.ref_name }}`
          **Commit Author:** `${{ github.event.head_commit.author.name }}`
          **Link:** <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>
        embed-color: 3066993

    - name: Notify Discord on Failure
      if: failure()
      uses: tsickert/discord-webhook@v7.0.0
      with:
        webhook-url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        embed-title: "❌ Backend Deploy Failed!"
        embed-description: |
          **Commit:** `${{ github.event.head_commit.message }}`
          **Branch:** `${{ github.ref_name }}`
          **Commit Author:** `${{ github.event.head_commit.author.name }}`
          **Link:** <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>
        embed-color: 15158332 