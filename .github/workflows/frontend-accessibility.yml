name: Frontend Accessibility Test

on:
  push:
    branches: [ "dev-fe","release", "main", "fe/ci-test2" ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-accessibility.yml'
  pull_request:
    branches: [ "dev-fe", "release","main", "fe/ci-test2" ]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'ÌÖåÏä§Ìä∏ Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - accessibility-only
        - performance-only

env:
  FE_DIR: frontend
  DEPLOY_BUCKET_NAME: ${{ secrets.FE_DEPLOY_BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  REPORT_TIMESTAMP: ${{ github.run_number }}-${{ github.sha }}
  LIGHTHOUSE_SERVER_URL: ${{ vars.LIGHTHOUSE_SERVER_URL }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test_type: ${{ steps.determine-test.outputs.test_type }}
    steps:
    - name: Determine test type
      id: determine-test
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          case "${{ github.event.inputs.test_type }}" in
            "full"|"accessibility-only"|"performance-only")
              echo "test_type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ö†Ô∏è Invalid test_type input, defaulting to 'full'"
              echo "test_type=full" >> $GITHUB_OUTPUT
              ;;
          esac
        else
          echo "test_type=full" >> $GITHUB_OUTPUT
        fi

  axe-accessibility-testing:
    needs: setup
    if: needs.setup.outputs.test_type == 'full' || needs.setup.outputs.test_type == 'accessibility-only'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'
        cache-dependency-path: ${{ env.FE_DIR }}/yarn.lock

    - name: Install dependencies
      working-directory: ${{ env.FE_DIR }}
      run: yarn install --frozen-lockfile

    - name: Install accessibility testing dependencies
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üì¶ Installing accessibility testing packages..."
        yarn add -D @playwright/test@^1.48.0 @axe-core/playwright@^4.10.2 playwright-html-reporter@^0.1.11
        yarn playwright install chromium

    - name: Inject accessibility test file
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üìù Injecting accessibility test configuration..."
        cat << 'ACCESSIBILITY_TEST_EOF' > accessibility.test.js
        ${{ vars.ACCESSIBILITY_TEST_JS }}
        ACCESSIBILITY_TEST_EOF
        echo "‚úÖ Accessibility test file created"

    - name: Inject playwright config file
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üìù Injecting playwright configuration..."
        cat << 'PLAYWRIGHT_CONFIG_EOF' > playwright.config.accessibility.js
        ${{ vars.PLAYWRIGHT_CONFIG_ACCESSIBILITY_JS }}
        PLAYWRIGHT_CONFIG_EOF
        echo "‚úÖ Playwright config file created"

    - name: Build application
      working-directory: ${{ env.FE_DIR }}
      run: yarn build

    - name: Start development server
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üöÄ Starting development server..."
        yarn preview --port 5173 --host &
        sleep 10
        
        for i in {1..10}; do
          if curl -f http://localhost:5173 > /dev/null 2>&1; then
            echo "‚úÖ Server is ready!"
            break
          fi
          echo "‚è≥ Waiting for server... ($i/10)"
          sleep 3
        done

    - name: Run axe accessibility tests
      working-directory: ${{ env.FE_DIR }}
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        CI: true
      run: |
        echo "üß™ Running axe accessibility tests..."
        mkdir -p screenshots accessibility-reports
        echo "üöÄ Running tests:"
        yarn playwright test --config=./playwright.config.accessibility.js --reporter=list
      continue-on-error: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_DEPLOY_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload axe reports to S3
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üìã Uploading Axe reports to S3..."
        echo "üîç Target bucket: s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/"
        if [ -d "accessibility-reports" ]; then
          aws s3 cp ./accessibility-reports/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/axe-reports/ --recursive
          aws s3 cp ./accessibility-reports/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/latest/axe-reports/ --recursive
        fi
        if [ -d "screenshots" ]; then
          aws s3 cp ./screenshots/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/screenshots/ --recursive
          aws s3 cp ./screenshots/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/latest/screenshots/ --recursive
        fi

  lighthouse-ci-testing:
    needs: setup
    if: needs.setup.outputs.test_type == 'full' || needs.setup.outputs.test_type == 'performance-only'
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        device: [desktop, mobile]
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'
        cache-dependency-path: ${{ env.FE_DIR }}/yarn.lock

    - name: Install dependencies
      working-directory: ${{ env.FE_DIR }}
      run: yarn install --frozen-lockfile

    - name: Install Lighthouse CI
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üì¶ Installing Lighthouse CI..."
        yarn add -D @lhci/cli@^0.15.0

    - name: Inject Lighthouse configuration
      working-directory: ${{ env.FE_DIR }}
      env:
        LIGHTHOUSERC_DESKTOP_JSON: ${{ vars.LIGHTHOUSERC_DESKTOP_JSON }}
        LIGHTHOUSERC_MOBILE_JSON: ${{ vars.LIGHTHOUSERC_MOBILE_JSON }}
      run: |
        echo "üìù Injecting ${{ matrix.device }} Lighthouse CI configuration..."
        
        if [ "${{ matrix.device }}" == "desktop" ]; then
          echo "$LIGHTHOUSERC_DESKTOP_JSON" > .lighthouserc.desktop.json
        else
          echo "$LIGHTHOUSERC_MOBILE_JSON" > .lighthouserc.mobile.json
        fi
        
        echo "‚úÖ ${{ matrix.device }} Lighthouse configuration injected successfully"

    - name: Build application
      working-directory: ${{ env.FE_DIR }}
      run: yarn build

    - name: Start production server
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üöÄ Starting production server for ${{ matrix.device }} testing..."
        yarn preview --port 5173 --host &
        sleep 15
        
        for i in {1..10}; do
          if curl -f http://localhost:5173 > /dev/null 2>&1; then
            echo "‚úÖ Server is ready!"
            break
          fi
          echo "‚è≥ Waiting for server... ($i/10)"
          sleep 3
        done

    - name: Test Lighthouse server connection
      id: lighthouse-server-test
      run: |
        echo "üîç Testing Lighthouse server connection..."
        if curl -f "${{ env.LIGHTHOUSE_SERVER_URL }}/health" > /dev/null 2>&1; then
          echo "‚úÖ Lighthouse server is available"
          echo "server_available=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Lighthouse server is not available, will run locally only"
          echo "server_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Lighthouse CI (${{ matrix.device }}) with server upload
      if: steps.lighthouse-server-test.outputs.server_available == 'true'
      working-directory: ${{ env.FE_DIR }}
      env:
        LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN  }}
      run: |
        echo "${{ matrix.device == 'desktop' && 'üñ•Ô∏è' || 'üì±' }} Running ${{ matrix.device }} Lighthouse CI with server upload..."
        yarn lhci autorun --config=.lighthouserc.${{ matrix.device }}.json
      continue-on-error: true

    - name: Run Lighthouse CI (${{ matrix.device }}) - local only
      if: steps.lighthouse-server-test.outputs.server_available == 'false'
      working-directory: ${{ env.FE_DIR }}
      env:
        LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN  }}
        LIGHTHOUSERC_DESKTOP_LOCAL_JSON: ${{ vars.LIGHTHOUSERC_DESKTOP_LOCAL_JSON }}
        LIGHTHOUSERC_MOBILE_LOCAL_JSON: ${{ vars.LIGHTHOUSERC_MOBILE_LOCAL_JSON }}
      run: |
        echo "${{ matrix.device == 'desktop' && 'üñ•Ô∏è' || 'üì±' }} Running ${{ matrix.device }} Lighthouse CI (local only)..."
        
        # Î°úÏª¨ Ï†ÑÏö© ÏÑ§Ï†ï Ï£ºÏûÖ
        if [ "${{ matrix.device }}" == "desktop" ]; then
          echo "$LIGHTHOUSERC_DESKTOP_LOCAL_JSON" > .lighthouserc.desktop.local.json
          yarn lhci autorun --config=.lighthouserc.desktop.local.json
        else
          echo "$LIGHTHOUSERC_MOBILE_LOCAL_JSON" > .lighthouserc.mobile.local.json
          yarn lhci autorun --config=.lighthouserc.mobile.local.json
        fi
      continue-on-error: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_DEPLOY_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload Lighthouse reports to S3
      working-directory: ${{ env.FE_DIR }}
      run: |
        echo "üöÄ Uploading ${{ matrix.device }} Lighthouse reports to S3..."
        echo "üîç Target bucket: s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/"
        
        # LHCI ÏÑúÎ≤Ñ ÏóÖÎ°úÎìúÎêú Î¶¨Ìè¨Ìä∏
        if [ -d ".lighthouseci" ]; then
          aws s3 cp ./.lighthouseci/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/lighthouse-${{ matrix.device }}/ --recursive
          aws s3 cp ./.lighthouseci/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/latest/lighthouse-${{ matrix.device }}/ --recursive
        fi
        
        # Î°úÏª¨ Ï†ÑÏö© Î¶¨Ìè¨Ìä∏
        if [ -d "lighthouse-reports-${{ matrix.device }}" ]; then
          aws s3 cp ./lighthouse-reports-${{ matrix.device }}/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/lighthouse-${{ matrix.device }}-local/ --recursive
          aws s3 cp ./lighthouse-reports-${{ matrix.device }}/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/latest/lighthouse-${{ matrix.device }}-local/ --recursive
        fi

  generate-combined-report:
    needs: [axe-accessibility-testing, lighthouse-ci-testing]
    if: always() && (needs.axe-accessibility-testing.result != 'cancelled' || needs.lighthouse-ci-testing.result != 'cancelled')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_DEPLOY_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate combined report
      env:
        AXE_RESULT: ${{ needs.axe-accessibility-testing.result }}
        LIGHTHOUSE_RESULT: ${{ needs.lighthouse-ci-testing.result }}
        REPORT_TIMESTAMP: ${{ env.REPORT_TIMESTAMP }}
        DEPLOY_BUCKET_NAME: ${{ secrets.FE_DEPLOY_BUCKET_NAME }}
      run: |
        echo "üìä Generating combined accessibility & performance report..."
        mkdir -p combined-reports
        

        cat << 'GENERATE_REPORT_EOF' > generate-combined-report.js
        ${{ vars.GENERATE_COMBINED_REPORT_JS }}
        GENERATE_REPORT_EOF

        node ./generate-combined-report.js

    - name: Upload combined reports to S3
      run: |
        echo "üì§ Uploading reports to S3..."
        echo "üîç Target bucket: s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/"
        
        aws s3 sync ./combined-reports/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/ 
        aws s3 sync ./combined-reports/ s3://${{ env.DEPLOY_BUCKET_NAME }}/accessibility-reports/latest/ 
        
        echo "‚úÖ Î≥¥Í≥†ÏÑú ÏóÖÎ°úÎìú ÏôÑÎ£å!"
        echo "üìã ÏµúÏã† Î≥¥Í≥†ÏÑú: https://${{ env.DEPLOY_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/accessibility-reports/latest/index.html"
        echo "üïê ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î≥¥Í≥†ÏÑú: https://${{ env.DEPLOY_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/index.html"

    - name: Notify Discord on Success
      if: success()
      uses: tsickert/discord-webhook@v7.0.0
      with:
        webhook-url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        embed-title: "‚úÖ Ï†ëÍ∑ºÏÑ± & ÏÑ±Îä• Í≤ÄÏÇ¨ ÏôÑÎ£å!"
        embed-description: |
          **Î∏åÎûúÏπò:** `${{ github.ref_name }}`
          **Ïª§Î∞ã:** `${{ github.event.head_commit.message }}`
          **ÏûëÏÑ±Ïûê:** `${{ github.event.head_commit.author.name }}`
          
          üìä **Î≥¥Í≥†ÏÑú:**
          ‚Ä¢ [üìã ÏµúÏã† ÌÜµÌï© Î≥¥Í≥†ÏÑú](https://${{ env.DEPLOY_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/accessibility-reports/latest/index.html)
          ‚Ä¢ [üïê ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î≥¥Í≥†ÏÑú](https://${{ env.DEPLOY_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/accessibility-reports/${{ env.REPORT_TIMESTAMP }}/index.html)
          ‚Ä¢ [üåê Lighthouse ÏÑúÎ≤Ñ ÎåÄÏãúÎ≥¥Îìú](${{ env.LIGHTHOUSE_SERVER_URL }})
          ‚Ä¢ [üåê axe Ï†ëÍ∑ºÏÑ± Í≤ÄÏÇ¨ Î≥¥Í≥†ÏÑú](https://${{ env.DEPLOY_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/accessibility-reports/latest/axe-reports/accessibility-report.html)
          
          üîç **ÌÖåÏä§Ìä∏ ÏÉÅÏÑ∏:**
          ‚Ä¢ Axe Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏: ${{ needs.axe-accessibility-testing.result }}
          ‚Ä¢ Lighthouse Ï¢ÖÌï© ÌÖåÏä§Ìä∏: ${{ needs.lighthouse-ci-testing.result }}
          
          üìã **Í≤ÄÏÇ¨Îêú ÌéòÏù¥ÏßÄ:**
          ‚Ä¢ üè† ÌôàÌéòÏù¥ÏßÄ, üîê Î°úÍ∑∏Ïù∏, üìä ÎåÄÏãúÎ≥¥Îìú
          ‚Ä¢ üìù ÎÖ∏Ìä∏, ‚è∞ ÌÉÄÏù¥Î®∏, üìö Ïä§ÌÑ∞Îîî
          
          üîó **ÎßÅÌÅ¨:**
          ‚Ä¢ [Ïª§Î∞ã Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        embed-color: 3066993

    - name: Notify Discord on Failure
      if: failure()
      uses: tsickert/discord-webhook@v7.0.0
      with:
        webhook-url: ${{ secrets.NOTIFICATION_WEBHOOK_URI }}
        embed-title: "‚ùå Ï†ëÍ∑ºÏÑ± & ÏÑ±Îä• Í≤ÄÏÇ¨ Ïã§Ìå®!"
        embed-description: |
          **Î∏åÎûúÏπò:** `${{ github.ref_name }}`
          **Ïª§Î∞ã:** `${{ github.event.head_commit.message }}`
          **ÏûëÏÑ±Ïûê:** `${{ github.event.head_commit.author.name }}`
          
          üîç **ÌÖåÏä§Ìä∏ ÏÉÅÌÉú:**
          ‚Ä¢ Axe Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏: ${{ needs.axe-accessibility-testing.result }}
          ‚Ä¢ Lighthouse Ï¢ÖÌï© ÌÖåÏä§Ìä∏: ${{ needs.lighthouse-ci-testing.result }}
          
          üîó **ÎßÅÌÅ¨:**
          ‚Ä¢ [Ïª§Î∞ã Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          ‚Ä¢ [Lighthouse ÏÑúÎ≤Ñ](${{ env.LIGHTHOUSE_SERVER_URL }})
        embed-color: 15158332 